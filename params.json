{
  "name": "Lazy Loading with Angular2 Routing",
  "tagline": "This repository demonstrates lazy loading of modules using routing.",
  "body": "# Lazy Loading with Angular2 Routing\r\n\r\nLet's dig into one of the cool features of **Angular2 Router** i.e. **Lazy Loading of Modules**.\r\nIf we go back to **Angular 1.x** we know that, there we were defining **Controller** and **Template** for each route, while templates were getting\r\nlazy loaded, but js files weren't. But in **Angular2** it is possible to load your modules as and when they are required. So let's not get into the `coding mode`.\r\n\r\nSo we have this small app which has basically 3 modules:\r\n\r\n1. AppModule - This is the root module of the application\r\n2. TasksModule - This is the child module of `AppModule`\r\n3. UsersModule - Child module of `AppModule`, sibling module of `TasksModule`\r\n\r\nFollowing are various components in which the application has been divided:\r\n\r\n1. AppComponent - This is the root component of the application.\r\n2. TasksComponent - It is the parent component in the tasks module.\r\n3. TaskDetailComponent - This component is responsible for displaying details of the task.\r\n4. TasksListComponent - Component that displays list of tasks.\r\n5. UsersComponent - It is the parent component in the users module and container component for UsersListComponent.\r\n6. UsersListComponent - Displays the list of users\r\n\r\nBefore we move on further, let's note that there are 3 other important parts of this app:\r\n\r\n1. ROUTING - This is the main router for our application.\r\n2. TASKS_ROUTING - This is the child router. Takes care of routing for tasks module.\r\n3. USERS_ROUTING - Takes care of routing for users module.\r\n\r\nNow, let's see some code now:\r\n\r\n```app.module.ts\r\nimport {NgModule} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {AppComponent} from './app.component';\r\nimport {APP_ROUTING, appRoutingProviders} from './app.routing';\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        APP_ROUTING\r\n    ],\r\n    declarations: [\r\n        AppComponent\r\n    ],\r\n    providers: [\r\n        appRoutingProviders\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n```\r\n\r\n> I am assuming that readers of this blog have some idea about Angular2 and its routing but would still try to give overview of few things.\r\n\r\nIn the above code you can see that we have imported **NgModule** and **BrowserModule**. We need `NgModule` decorator for defining module-level components, directives, pipes etc.\r\n**BrowserModule** registers critical application service providers and also re-exports **CommonModule** from `@angular/common`.\r\nWe provide `AppComponent` in **declarations**, to tell **Angular** that  `AppComponent` belongs to `AppModule`. \r\n**bootstrap** is to advise **Angular** to bootstrap `AppComponent` into the **DOM** once `AppModule` starts.\r\n\r\nOur `AppComponent` looks something like this:\r\n\r\n```app.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n     <nav>\r\n        <a routerLink=\"/tasks\">Tasks</a>\r\n        <a routerLink=\"/users\">Users</a>\r\n      </nav>\r\n      <router-outlet></router-outlet>\r\n    `\r\n})\r\n\r\nexport class AppComponent {\r\n}\r\n```\r\n\r\nAs you can see above, we have two anchor tags for navigation - one takes us to `tasks` page and another one takes us to `users` page. \r\nYou can see `routerLink` property here which has a string path.\r\n\r\nLet's see `TasksModule`:\r\n\r\n```tasks.module.ts\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TasksComponent} from './tasks.component';\r\nimport {TaskDetailComponent} from './task-detail.component';\r\nimport {TasksListComponent} from './tasks-list.component';\r\nimport {TASKS_ROUTING} from \"./tasks.routing\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        TASKS_ROUTING\r\n    ],\r\n    declarations: [\r\n        TasksComponent,\r\n        TaskDetailComponent,\r\n        TasksListComponent\r\n    ]\r\n})\r\nexport class TasksModule {\r\n}\r\n```\r\n\r\nWe have imported **CommonModule** because it provides important directives such as **NgIf** and **NgFor**.\r\nAnd here are the various components:\r\n\r\n```tasks.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    template: `\r\n        <h2>Your Tasks</h2>\r\n        <router-outlet></router-outlet>\r\n    `,\r\n})\r\nexport class TasksComponent {\r\n}\r\n```\r\n\r\n```tasks-list.component.ts\r\nimport {Component} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n    template: `\r\n    <div>\r\n        <ul class=\"bubble\">\r\n            <li *ngFor=\"let task of tasks let i=index\" (click)=\"onSelect(task)\">\r\n                <span>{{i+1}}.</span>\r\n                <span>{{task.title}}</span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    `,\r\n})\r\n\r\nexport class TasksListComponent {\r\n\r\n    constructor(private router:Router) {\r\n    }\r\n\r\n    private tasks = [\r\n        {id: '1', title: 'Code Cleanup'}, \r\n        {id: '2', title: 'Review Code'}, \r\n        {id: '3', title: 'Build to Prod'}\r\n    ];\r\n    private errorMessage:any = '';\r\n\r\n    onSelect(task) {\r\n        this.router.navigate(['/tasks', task.id]);\r\n    }\r\n}\r\n```\r\n\r\nIn order to keep the demo as simple as possible, we have a small hard-coded list of tasks. We are displaying a list of tasks \r\nand on clicking on each task, user would be navigated to `task-detail` page where details of a task would be displayed.\r\n\r\n```task-detail.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    template: `\r\n    <div>\r\n        <span>Some task detail to show up here.</span>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class TaskDetailComponent {\r\n}\r\n```\r\n\r\nAnd here is the route configuration for our`tasks` module:\r\n\r\n```tasks.routing.ts\r\nimport {ModuleWithProviders}  from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {TasksComponent}    from './tasks.component';\r\nimport {TaskDetailComponent}  from './task-detail.component';\r\nimport {TasksListComponent} from './tasks-list.component';\r\n\r\nconst TASKS_ROUTES:Routes = <any>[\r\n    {\r\n        path: '',\r\n        component: TasksComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: TasksListComponent\r\n            },\r\n            {\r\n                path: ':id',\r\n                component: TaskDetailComponent,\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport const TASKS_ROUTING:ModuleWithProviders = RouterModule.forChild(TASKS_ROUTES);\r\n```\r\n\r\nSo when a user lands to the application, by default `tasks` module would be displayed to him. So when the path would be simply `/tasks`, user would see list of tasks and once\r\nuser clicks on a particular task, id  would be added as the **routeParam** and route would change to '/tasks/id'(id of that particular task).\r\n\r\nNow, let's quickly have a look at the `users` module.\r\n\r\n```users.module.ts\r\nimport {NgModule}       from '@angular/core';\r\nimport {CommonModule}   from '@angular/common';\r\nimport {UsersComponent}    from './users.component';\r\nimport {UsersListComponent}  from './users-list.component';\r\nimport {USERS_ROUTING} from \"./users.routing\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        USERS_ROUTING\r\n    ],\r\n    declarations: [\r\n        UsersComponent,\r\n        UsersListComponent\r\n    ]\r\n})\r\nexport class UsersModule {\r\n}\r\n```\r\n\r\nand here is the `UsersComponent` which is the parent component for `UsersList`. Here are both the components:\r\n\r\n```users.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    template: `\r\n    <h2>Users List</h2>\r\n    <router-outlet></router-outlet>\r\n  `,\r\n})\r\nexport class UsersComponent {\r\n}\r\n```\r\n\r\n\r\n```users-list.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    template: `\r\n    <div>\r\n        <ul class=\"bubble\">\r\n            <li *ngFor=\"let user of users let i=index\">\r\n                <span>{{i+1}}.</span>\r\n                <span>{{user.name}}</span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    `,\r\n})\r\n\r\nexport class UsersListComponent {\r\n    private users = [\r\n        {id: '1', name: 'John Doe'},\r\n        {id: '2', name: 'Jane Roe'},\r\n        {id: '3', name: 'John Smith'}\r\n    ];\r\n}\r\n```\r\n\r\nand here is the routing for `Users` module:\r\n\r\n```users.routing.ts\r\nimport {ModuleWithProviders}  from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {UsersComponent}    from './users.component';\r\nimport {UsersListComponent}  from './users-list.component';\r\n\r\nconst USERS_ROUTES:Routes = <any>[\r\n    {\r\n        path: '',\r\n        component: UsersComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: UsersListComponent\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport const USERS_ROUTING:ModuleWithProviders = RouterModule.forChild(USERS_ROUTES);\r\n```\r\n\r\nLet's quickly move onto the place where all the magic happens i.e. `app.routing.ts`:\r\n\r\n```app.routing.ts\r\nimport {ModuleWithProviders} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nconst APP_ROUTES:Routes = [\r\n    {path: '', redirectTo: '/tasks', pathMatch: 'full'},\r\n    {path: 'tasks', loadChildren: 'app/tasks/tasks.module#TasksModule'},\r\n    {path: 'users', loadChildren: 'app/users/users.module#UsersModule'}\r\n];\r\nexport const appRoutingProviders:any[] = [];\r\nexport const APP_ROUTING:ModuleWithProviders = RouterModule.forRoot(APP_ROUTES);\r\n```\r\n\r\nWell, as you can see in the above code, since by default we are redirecting our page to `tasks` so our tasks module would get loaded. When the route changes to '/users', the routes module would be loaded. This has been achieved\r\nusing the `loadChildren` property defined on the route. **Angular** will fetch the module at the location and then load the routes defined in its router config. \r\nSo we did not load `UsersModule` and `TasksModule` in our `AppComponent`, instead used `loadChildren` property in the routing config to lazy load our modules.\r\n\r\nHere is the quick view of what is happening:\r\n\r\n![view.gif](https://raw.githubusercontent.com/NamitaMalik/Lazy-Loading-with-Angular2-Routing/master/assets/view.gif)\r\n\r\nYou can see tasks module gets loaded only when we click on the Tasks link. Similarly, users module also gets when we click on the Users link.\r\n\r\nWell that's all for now. I'll be back again with a new post soon, till then Happy Learning!\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}